package im.syf.geha.data.network.response

data class RepoDto(
    val id: Int,
    val node_id: String,
    val name: String,
    val full_name: String,
    val owner: UserDto,
    val private: Boolean,
    val html_url: String,
    val description: String,
    val fork: Boolean,
    val url: String,
    val archive_url: String,
    val assignees_url: String,
    val blobs_url: String,
    val branches_url: String,
    val collaborators_url: String,
    val comments_url: String,
    val commits_url: String,
    val compare_url: String,
    val contents_url: String,
    val contributors_url: String,
    val deployments_url: String,
    val downloads_url: String,
    val events_url: String,
    val forks_url: String,
    val git_commits_url: String,
    val git_refs_url: String,
    val git_tags_url: String,
    val git_url: String,
    val issue_comment_url: String,
    val issue_events_url: String,
    val issues_url: String,
    val keys_url: String,
    val labels_url: String,
    val languages_url: String,
    val merges_url: String,
    val milestones_url: String,
    val notifications_url: String,
    val pulls_url: String,
    val releases_url: String,
    val ssh_url: String,
    val stargazers_url: String,
    val statuses_url: String,
    val subscribers_url: String,
    val subscription_url: String,
    val tags_url: String,
    val teams_url: String,
    val trees_url: String,
    val clone_url: String,
    val mirror_url: String,
    val hooks_url: String,
    val svn_url: String,
    val homepage: String,
    val language: String,
    val forks: Int,
    val forks_count: Int,
    val stargazers_count: Int,
    val watchers_count: Int,
    val watchers: Int,
    val size: Int,
    val default_branch: String,
    val open_issues: Int,
    val open_issues_count: Int,
    val is_template: Boolean,
    val license: LicenseDto,
    val topics: List<String>,
    val has_issues: Boolean,
    val has_projects: Boolean,
    val has_wiki: Boolean,
    val has_pages: Boolean,
    val has_downloads: Boolean,
    val archived: Boolean,
    val disabled: Boolean,
    val visibility: String,
    val pushed_at: String,
    val created_at: String,
    val updated_at: String,
    val permissions: PermissionsDto,
    val allow_rebase_merge: Boolean,
    val temp_clone_token: String,
    val allow_squash_merge: Boolean,
    val allow_auto_merge: Boolean,
    val delete_branch_on_merge: Boolean,
    val allow_merge_commit: Boolean,
    val subscribers_count: Int,
    val network_count: Int,
    val organization: UserDto? = null,
    val template_repository: RepoDto? = null,
    val parent: RepoDto? = null,
    val source: RepoDto? = null,
) {
    companion object {
        private val TEMPLATE_PARENT_OR_SOURCE_EXAMPLE: RepoDto = RepoDto(
            id = 1296269,
            node_id = "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            name = "Hello-World",
            full_name = "octocat/Hello-World",
            owner = UserDto.EXAMPLE,
            private = false,
            html_url = "https://github.com/octocat/Hello-World",
            description = "This your first repo!",
            fork = false,
            url = "https://api.github.com/repos/octocat/Hello-World",
            archive_url = "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            assignees_url = "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            blobs_url = "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            branches_url = "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            collaborators_url = "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            comments_url = "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
            commits_url = "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            compare_url = "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            contents_url = "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            contributors_url = "https://api.github.com/repos/octocat/Hello-World/contributors",
            deployments_url = "https://api.github.com/repos/octocat/Hello-World/deployments",
            downloads_url = "https://api.github.com/repos/octocat/Hello-World/downloads",
            events_url = "https://api.github.com/repos/octocat/Hello-World/events",
            forks_url = "https://api.github.com/repos/octocat/Hello-World/forks",
            git_commits_url = "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            git_refs_url = "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            git_tags_url = "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            git_url = "git:github.com/octocat/Hello-World.git",
            issue_comment_url = "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            issue_events_url = "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            issues_url = "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
            keys_url = "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            labels_url = "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
            languages_url = "https://api.github.com/repos/octocat/Hello-World/languages",
            merges_url = "https://api.github.com/repos/octocat/Hello-World/merges",
            milestones_url = "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            notifications_url = "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            pulls_url = "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            releases_url = "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
            ssh_url = "git@github.com:octocat/Hello-World.git",
            stargazers_url = "https://api.github.com/repos/octocat/Hello-World/stargazers",
            statuses_url = "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            subscribers_url = "https://api.github.com/repos/octocat/Hello-World/subscribers",
            subscription_url = "https://api.github.com/repos/octocat/Hello-World/subscription",
            tags_url = "https://api.github.com/repos/octocat/Hello-World/tags",
            teams_url = "https://api.github.com/repos/octocat/Hello-World/teams",
            trees_url = "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
            clone_url = "https://github.com/octocat/Hello-World.git",
            mirror_url = "git:git.example.com/octocat/Hello-World",
            hooks_url = "https://api.github.com/repos/octocat/Hello-World/hooks",
            svn_url = "https://svn.github.com/octocat/Hello-World",
            homepage = "https://github.com",
            language = "PHP",
            forks = 9,
            forks_count = 9,
            stargazers_count = 80,
            watchers_count = 80,
            watchers = 80,
            size = 108,
            default_branch = "master",
            open_issues = 0,
            open_issues_count = 0,
            is_template = false,
            license = LicenseDto.EXAMPLE,
            topics = listOf("octocat", "atom", "electron", "api"),
            has_issues = true,
            has_projects = true,
            has_wiki = true,
            has_pages = false,
            has_downloads = true,
            archived = false,
            disabled = false,
            visibility = "public",
            pushed_at = "2011-01-26T19:06:43Z",
            created_at = "2011-01-26T19:01:12Z",
            updated_at = "2011-01-26T19:14:43Z",
            permissions = PermissionsDto.EXAMPLE,
            allow_rebase_merge = true,
            temp_clone_token = "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
            allow_squash_merge = true,
            allow_auto_merge = false,
            delete_branch_on_merge = true,
            allow_merge_commit = true,
            subscribers_count = 42,
            network_count = 0,
        )

        val EXAMPLE: RepoDto = TEMPLATE_PARENT_OR_SOURCE_EXAMPLE.copy(
            organization = UserDto.EXAMPLE,
            template_repository = TEMPLATE_PARENT_OR_SOURCE_EXAMPLE,
            parent = TEMPLATE_PARENT_OR_SOURCE_EXAMPLE,
            source = TEMPLATE_PARENT_OR_SOURCE_EXAMPLE,
        )
    }
}

data class LicenseDto(
    val key: String,
    val name: String,
    val url: String,
    val spdx_id: String,
    val node_id: String,
    val html_url: String,
) {
    companion object {
        val EXAMPLE: LicenseDto = LicenseDto(
            key = "mit",
            name = "MIT License",
            url = "https://api.github.com/licenses/mit",
            spdx_id = "MIT",
            node_id = "MDc6TGljZW5zZW1pdA==",
            html_url = "https://api.github.com/licenses/mit",
        )
    }
}

data class PermissionsDto(
    val pull: Boolean,
    val admin: Boolean,
    val push: Boolean,
) {
    companion object {
        val EXAMPLE: PermissionsDto = PermissionsDto(
            pull = true,
            push = false,
            admin = false,
        )
    }
}
